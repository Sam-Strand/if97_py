import numpy as np
from numba import jit, float64, vectorize

J0 = np.array([0, 1, -5, -4, -3, -2, -1, 2, 3])
N0 = np.array([-0.96927686500217E+01, 0.10086655968018E+02, -0.56087911283020E-02,0.71452738081455E-01, -0.40710498223928E+00, 0.14240819171444E+01,-0.43839511319450E+01, -0.28408632460772E+00, 0.21268463753307E-01])
Ir = np.array( [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 5, 6, 6, 6, 7, 7, 7, 8, 8, 9, 10, 10, 10, 16, 16, 18, 20, 20, 20, 21, 22, 23, 24, 24, 24])
Jr = np.array([0, 1, 2, 3, 6, 1, 2, 4, 7, 36, 0, 1, 3, 6, 35, 1, 2, 3, 7, 3, 16, 35, 0,11, 25, 8, 36, 13, 4, 10, 14, 29, 50, 57, 20, 35, 48, 21, 53, 39, 26, 40,58])
nr = np.array([-0.0017731742473212999, -0.017834862292357999, -0.045996013696365003, -0.057581259083432, -0.050325278727930002, -3.3032641670203e-05, -0.00018948987516315, -0.0039392777243355001, -0.043797295650572998, -2.6674547914087001e-05, 2.0481737692308999e-08, 4.3870667284435001e-07, -3.2277677238570002e-05, -0.0015033924542148, -0.040668253562648998, -7.8847309559367001e-10, 1.2790717852285001e-08, 4.8225372718507002e-07, 2.2922076337661001e-06, -1.6714766451061001e-11, -0.0021171472321354998, -23.895741934103999, -5.9059564324270004e-18, -1.2621808899101e-06, -0.038946842435739003, 1.1256211360459e-11, -8.2311340897998004, 1.9809712802088e-08, 1.0406965210174e-19, -1.0234747095929e-13, -1.0018179379511e-09, -8.0882908646984998e-11, 0.10693031879409, -0.33662250574170999, 8.9185845355420999e-25, 3.0629316876231997e-13, -4.2002467698208001e-06, -5.9056029685639003e-26, 3.7826947613457002e-06, -1.2768608934681e-15, 7.3087610595061e-29, 5.5414715350778001e-17, -9.4369707241209998e-07])


@vectorize([float64(float64)], nopython=True, cache=True)
def γ0_τ(tau):
    sum_val = 0.0
    for j in range(len(J0)):
        sum_val += N0[j] * J0[j] * tau ** (J0[j] - 1)
    return sum_val


@vectorize([float64(float64, float64)], nopython=True, cache=True)
def γr_τ(tau, pi):
    sum_val = 0.0
    for j in range(len(nr)):
        sum_val += nr[j] * pi ** Ir[j] * Jr[j] * (tau - 0.5) ** (Jr[j] - 1)
    return sum_val


class SteamRegion:
    def enthalpy_t_p(self, t, p):
        t_k = np.asarray(t, dtype=np.float64)
        p_mpa = np.asarray(p, dtype=np.float64)
        
        tau = 540.0 / t_k
        pi = p_mpa / 16.53
        
        return 249224.04 * (γ0_τ(tau) + γr_τ(tau, pi))


if __name__ == "__main__":
    steam = SteamRegion()
    
    print(steam.enthalpy_t_p(520, [13, 14, 15]))
    
    print(steam.enthalpy_t_p(300, 0.0035))
    print(steam.enthalpy_t_p([700], [0.0035])) 
    print(steam.enthalpy_t_p([700], [30]))